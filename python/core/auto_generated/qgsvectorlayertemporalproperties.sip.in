/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/qgsvectorlayertemporalproperties.h                          *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/






class QgsVectorLayerTemporalProperties : QgsMapLayerTemporalProperties
{
%Docstring
Implementation of map layer temporal properties for vector layers.

.. versionadded:: 3.14
%End

%TypeHeaderCode
#include "qgsvectorlayertemporalproperties.h"
%End
  public:

    QgsVectorLayerTemporalProperties( QObject *parent /TransferThis/ = 0, bool enabled = false );
%Docstring
Constructor for QgsVectorLayerTemporalProperties, with the specified ``parent`` object.

The ``enabled`` argument specifies whether the temporal properties are initially enabled or not (see isActive()).
%End

    virtual bool isVisibleInTemporalRange( const QgsDateTimeRange &range ) const;


    enum TemporalMode
    {
      ModeFixedTemporalRange,
      ModeFeatureDateTimeInstantFromField,
      ModeFeatureDateTimeStartAndEndFromFields,
      ModeRedrawLayerOnly,
    };

    TemporalMode mode() const;
%Docstring
Returns the temporal properties mode.

.. seealso:: :py:func:`setMode`
%End

    void setMode( TemporalMode mode );
%Docstring
Sets the temporal properties ``mode``.

.. seealso:: :py:func:`mode`
%End

    virtual QgsTemporalProperty::Flags flags() const;

%Docstring
Returns flags associated to the temporal property.
%End

    void setFixedTemporalRange( const QgsDateTimeRange &range );
%Docstring
Sets a temporal ``range`` to apply to the whole layer. All features from
the layer will be rendered whenever the current datetime range of
a render context intersects the specified ``range``.

.. warning::

   This setting is only effective when mode() is
   QgsVectorLayerTemporalProperties.ModeFixedTemporalRange

.. seealso:: :py:func:`fixedTemporalRange`
%End

    const QgsDateTimeRange &fixedTemporalRange() const;
%Docstring
Returns the fixed temporal range for the layer.

.. warning::

   To be used only when mode() is
   QgsVectorLayerTemporalProperties.ModeFixedTemporalRange

.. seealso:: :py:func:`setFixedTemporalRange`
%End

    QString startField() const;
%Docstring
Returns the name of the start datetime field, which
contains the start time for the feature's time spans.

If mode() is ModeFeatureDateTimeInstantFromField, then this field
represents both the start AND end times.

.. seealso:: :py:func:`setStartField`

.. seealso:: :py:func:`endField`
%End

    void setStartField( const QString &field );
%Docstring
Sets the name of the start datetime ``field``, which
contains the start time for the feature's time spans.

If mode() is ModeFeatureDateTimeInstantFromField, then this field
represents both the start AND end times.

.. seealso:: :py:func:`startField`

.. seealso:: :py:func:`setEndField`
%End

    QString endField() const;
%Docstring
Returns the name of the end datetime field, which
contains the end time for the feature's time spans.

.. seealso:: :py:func:`setEndField`

.. seealso:: :py:func:`startField`
%End

    void setEndField( const QString &field );
%Docstring
Sets the name of the end datetime ``field``, which
contains the end time for the feature's time spans.

.. seealso:: :py:func:`endField`

.. seealso:: :py:func:`setStartField`
%End

    QString createFilterString( QgsVectorLayer *layer, const QgsDateTimeRange &range ) const;
%Docstring
Creates a QGIS expression filter string for filtering features from ``layer``
to those within the specified time ``range``.

The returned expression string considers the mode() and other related
settings (such as startField()) when building the filter string.

.. warning::

   Note that ModeFixedTemporalRange is intentional NOT handled by this method
   and if mode() is ModeFixedTemporalRange then an empty string will be returned. Use
   isVisibleInTemporalRange() when testing whether features from a layer set to the
   ModeFixedTemporalRange should ALL be filtered out.
%End

    virtual QDomElement writeXml( QDomElement &element, QDomDocument &doc, const QgsReadWriteContext &context );

    virtual bool readXml( const QDomElement &element, const QgsReadWriteContext &context );

    virtual void setDefaultsFromDataProviderTemporalCapabilities( const QgsDataProviderTemporalCapabilities *capabilities );


};

/************************************************************************
 * This file has been generated automatically from                      *
 *                                                                      *
 * src/core/qgsvectorlayertemporalproperties.h                          *
 *                                                                      *
 * Do not edit manually ! Edit header and run scripts/sipify.pl again   *
 ************************************************************************/
